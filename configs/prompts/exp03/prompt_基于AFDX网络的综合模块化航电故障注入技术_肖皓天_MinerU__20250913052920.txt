# 实体关系抽取Prompt

## 任务描述
你的角色是一位专业的学术文献实体关系抽取专家，专精于从航空航天领域科研文献中识别和抽取实体及其关系。你的任务是通读给定文本，抽取文本中出现的核心实体，及其对应的关系，并以JSON格式输出。

## 实体定义
文献中出现的核心概念：算法、方法、模型、系统、故障、指标等都可视为实体。实体可以包括：
- **研究领域**
定义 ：PHM相关的研究方向和应用领域 
示例 ：故障预测与健康管理(PHM)、故障诊断、剩余使用寿命预测(RUL)、健康状态评估、预测性维护等
- **研究方法**
定义 ：PHM研究中采用的具体方法和技术路线 
示例 ：寿命预测、趋势预测、健康预测、风险评估、状态监测、故障诊断、性能评估等
- **理论基础**
定义 ：支撑PHM技术的基础理论和数学原理 
示例 ：信号处理理论、机器学习理论、可靠性理论、概率统计理论、控制理论等
- **模型**
定义 ：基于特定算法构建的具体结构或实例 示例 ：LSTM神经网络、Transformer模型、深度置信网络(DBN)、隐马尔可夫模型(HMM)、ARIMA模型等
- **算法**
定义 ：用于解决特定问题的计算方法和程序步骤 
示例 ：遗传算法、粒子群优化、支持向量机(SVM)、随机森林、卡尔曼滤波等
- **系统/部件**
定义 ：航空航天设备的系统或组成部件 
示例 ：航空发动机、齿轮箱、轴承、叶片、燃油系统、液压系统、航电系统等
- **故障模式**
定义 ：设备可能出现的故障类型和失效模式 
示例 ：轴承磨损、疲劳裂纹、腐蚀、过热、振动异常、性能退化等
- **数据集**
定义 ：用于训练和验证模型的标准数据集 
示例 ：C-MAPSS数据集、CWRU轴承数据集、IMS轴承数据集、PHM Challenge数据集等
- **传感器/监测参数**
定义 ：用于监测设备状态的传感器设备和监测参数 
示例 ：振动传感器、温度传感器、压力传感器、转速、振动信号、温度、压力等
- **特征/健康指标**
定义 ：表征设备健康状态的特征参数和指标 
示例 ：剩余使用寿命(RUL)、健康指标(HI)、退化指标、频域特征、时域特征、统计特征等
- **性能指标**
定义 ：评估模型或方法性能的量化指标 
示例 ：准确率、精确率、召回率、F1分数、均方根误差(RMSE)、平均绝对误差(MAE)等
- **软件工具**
定义 ：用于PHM研究和应用的软件平台和工具 
示例 ：MATLAB、Python、TensorFlow、PyTorch、Simulink、LabVIEW等
- **应用场景**
定义 ：PHM技术的具体应用环境和场景 
示例 ：发动机健康监测、结构健康监测、预测性维护、故障诊断系统、机载健康管理等

## 关系定义
文献中的实体之间通常存在逻辑、演进、依赖、功能、组合、比较、创新、评价或因果等联系。关系类型包括但不限于：
### 1. 技术演进类
- 发展为 ：传统RNN发展为LSTM
- 改进了 ：注意力机制改进了Transformer性能
- 演化成 ：专家系统演化成机器学习方法
- 升级为 ：基础模型升级为集成模型
### 2. 依赖关系类
- 基于 ：健康预测模型基于振动信号特征
- 依据 ：故障诊断依据传感器数据；轴承剩余寿命预测模型参数依据多传感器振动和温度信号
- 利用 ：深度学习利用大数据优势
- 采用 ：系统采用多传感器融合技术
- 建立在 ：深度卷积残差网络模型建立在卷积神经网络理论
### 3. 功能关系类
- 应用于 ：机器学习应用于故障预测
- 用于 ：卡尔曼滤波用于状态估计
- 解决 ：深度学习解决特征提取问题
- 实现 ：神经网络实现非线性映射
- 支持 ：传感器网络支持实时监测
- 处理 ：主成分分析方法处理航空发动机多维传感器振动数据
- 预测/诊断 ：LSTM模型预测飞机发动机轴承剩余寿命
### 4. 因果关系类
- 导致 ：轴承磨损导致振动异常；高温导致涡轮叶片疲劳加速
- 引起 ：温度升高引起性能退化；润滑不足引起齿轮磨损
- 造成 ：疲劳载荷造成裂纹扩展
- 产生 ：故障产生异常信号；振动异常产生轴承早期故障信号
- 影响 ：载荷波动影响剩余寿命预测精度
### 5. 组合关系类
- 包含 ：PHM系统包含数据采集模块
- 包括 ：航空装备可用度影响因素包括装备系统的构成及其可靠性、维修性参数
- 组成 ：多个传感器组成监测网络
- 结合 ：物理模型结合数据驱动方法
- 融合 ：多源信息融合提高精度；多传感器数据融合方法融合时域和频域振动特征
- 由…组成 ：传感器系统由加速度传感器、温度传感器和压力传感器组成
### 6. 比较关系类
- 优于 ：深度学习优于传统方法
- 超越 ：新算法超越现有基准
- 区别于 ：监督学习区别于无监督学习
- 对比 ：不同方法的性能对比；基于Copula相似性的航空发动机RUL预测方法对比传统方法
### 7. 创新关系类
- 提出了 ：本文提出了一种结合小波变换的轴承故障诊断方法
- 开发了 ：团队开发了创新算法
- 设计了 ：研究设计了新型传感器
- 创建了 ：本文创建了标准数据集
- 创新了 ：多尺度特征融合方法创新了不同时间分辨率振动信号的联合分析
- 突破了 ：Deep RUL预测方法突破了小样本寿命预测的限制
### 8. 结果评价类
- 评价指标是 ：RUL预测模型评价指标是均方根误差和平均绝对百分比误差
- 得出 ：RUL预测模型得出航空发动机剩余寿命的数值估计
### 关系抽取指导原则
1.全面性 ：不遗漏任何有意义的实体间联系
2.创新性 ：特别关注学术文献中的创新关系和技术演进
3.灵活性 ：关系类型不限于上述分类，可根据实际语义创建新关系
4.动态性 ：关注时间维度上的变化和发展关系
5.隐含性 ：挖掘文本中隐含但语义明确的关系
关系只需反映实体间实际存在的语义联系，具体类型无需严格限定，允许根据上下文灵活判断。

### 关系抽取指导原则
1. **全面性**：不遗漏任何有意义的实体间联系
2. **创新性**：特别关注学术文献中的创新关系和技术演进
3. **灵活性**：关系类型不限于上述分类，可根据实际语义创建新关系
4. **动态性**：关注时间维度上的变化和发展关系
5. **隐含性**：挖掘文本中隐含但语义明确的关系

## schema 定义
{schema_placeholder}

## 抽取指令
### 步骤1：核心实体识别
- 重点扫描 摘要、引言和结论 部分，识别论文的核心研究对象、主要方法和关键成果
- 从关键段落中提取第一批核心实体（通常是最重要的技术、模型、系统等）
### 步骤2：关系发现与扩展
- 围绕已识别的核心实体，在原文中寻找描述它们关系的 动词和关键短语
- 构建核心关系三元组：(头实体, 关系类型, 尾实体)
- 将关系中新出现的重要实体加入实体列表，继续寻找它们的关系
### 步骤3：质量检查与输出
- 确保relations中的所有实体都在entities列表中
- 检查实体命名的一致性（统一同义词）
- 验证关系的逻辑合理性和准确性
- 按JSON格式输出最终结果
- 确保抽取的关系符合航空航天领域的专业知识和常识
- 避免重复或冗余的实体和关系

## 输出格式
请严格按照以下JSON格式输出结果：

```json
{
  "entities": [
    {
      "name": "故障诊断技术",
      "type": "研究方法"
    },
    {
      "name": "预测与健康管理(PHM)系统",
      "type": "系统/部件"
    },
    {
      "name": "航电系统的综合化",
      "type": "研究领域"
    },
    {
      "name": "航空电子系统",
      "type": "系统/部件"
    },
    {
      "name": "综合模块化航空电子系统",
      "type": "系统/部件"
    },
    {
      "name": "故障预测与健康管理系统",
      "type": "系统/部件"
    },
    {
      "name": "飞机安全性",
      "type": "性能指标"
    },
    {
      "name": "分层结构",
      "type": "系统/部件"
    },
    {
      "name": "标准化",
      "type": "性能指标"
    },
    {
      "name": "层次化",
      "type": "性能指标"
    },
    {
      "name": "模块化",
      "type": "性能指标"
    },
    {
      "name": "开放性",
      "type": "性能指标"
    },
    {
      "name": "电子系统",
      "type": "系统/部件"
    },
    {
      "name": "综合化航空电子系统",
      "type": "系统/部件"
    },
    {
      "name": "健康管理体系",
      "type": "系统/部件"
    },
    {
      "name": "增强诊断",
      "type": "研究方法"
    },
    {
      "name": "健康评估",
      "type": "研究方法"
    },
    {
      "name": "故障预测",
      "type": "研究方法"
    },
    {
      "name": "贝叶斯网络",
      "type": "模型"
    }
  ],
  "relations": [
    {
      "head": "故障诊断技术",
      "relation": "发展为",
      "tail": "预测与健康管理(PHM)系统"
    },
    {
      "head": "故障预测与健康管理系统",
      "relation": "应用于",
      "tail": "综合模块化航空电子系统"
    },
    {
      "head": "综合模块化航空电子系统",
      "relation": "按功能划分为",
      "tail": "分层结构"
    },
    {
      "head": "故障预测与健康管理系统",
      "relation": "满足要求",
      "tail": "标准化"
    },
    {
      "head": "故障预测与健康管理系统",
      "relation": "满足要求",
      "tail": "层次化"
    },
    {
      "head": "故障预测与健康管理系统",
      "relation": "满足要求",
      "tail": "模块化"
    },
    {
      "head": "故障预测与健康管理系统",
      "relation": "满足要求",
      "tail": "开放性"
    },
    {
      "head": "健康管理体系",
      "relation": "应用于",
      "tail": "综合化航空电子系统"
    }
  ]
}
```

## 注意事项
###必须遵守的规则：
1.严格按照JSON格式输出 ：确保entities和relations数组格式正确
2.实体类型灵活性 ：不局限于给定的实体类型，可根据文本内容创建新类型
3.关系类型创新性 ：优先使用已定义的关系类型，但允许根据语义创建新关系
4.完整概念原则 ：选择最有意义的完整概念作为实体，避免过度分割
5. **不受schema限制**：给定的schema和示例仅作参考，实体类型和关系类型均不仅限于此
6. **实体一致性**：确保relations中引用的所有实体都在entities数组中明确定义
7. **关系准确性**：关系表述应准确反映实体间的真实语义联系
###特别关注：
- 技术演进关系 ：重点识别"基于"、"改进"、"发展"、"演化"等创新关系
- 比较关系 ：注意"优于"、"劣于"、"相似于"、"区别于"等对比关系
- 应用关系 ：关注"应用于"、"解决"、"处理"等实际应用联系
- 隐含关系 ：挖掘文本中未明确表述但语义清晰的关系

质量保证：
- 确保抽取的关系符合航空航天领域的专业知识和常识
- 避免重复或冗余的实体和关系
- 保持实体边界的准确性，既不过度合并也不过度分割


## 输入数据 
现在，你将接收到用于处理的本次任务的全部输入数据。
论文全文:
```markdown```
摘要：为了对综合模块化航空电子（IMA）系统的健康管理功能进行验证，给出了通过航空电子全双工交换式以太网（AFDX）进行故障注入的技术解决方案。在该方案下，提出了故障数据的配置管理方法，以及一种解决主机数据更新间隔、发送间隔与AFDX端系统定时器周期不匹配的发送策略，搭建了相应故障注入装置，开发了故障注入软件，通过实验测试说明了上述方法和策略的有效性。

关键词：综合模块化航空电子；AFDX；故障注入技术；定时器；数据速率  中图分类号：TP393.03 文献标志码：A doi:10.3969/j.issn.1671- 637X.2017.10.015

# AFDX Based Fault Injection Technology for Integrated Modular Avionics System

XIAO Hao- tian， XIONG Hua- gang， LI Qiao， LI Jing ( Beihang University,Beijing 100191,China)

# 0 引言

航空电子全双工交换式以太网（AFDX）是综合模块化航空电子体系结构中的骨干网络互连技术，现已被应用于空客A380和波音B787的航电系统，并配备有健康管理和故障预测（PHM）机制。与分时分区操作系统相适应的典型的健康管理功能包含分区驻留的PHM进程和模块驻留的PHM分区。

已有的故障注入方法主要关注于对AFDX网络通信本身的故障，如物理层、链路层、虚拟链路（VL）端口故障；或是通过处理器硬件进行接触式或并接格式硬件注入；但是在不破坏IMA处理机的运行条件下进行PHM本身调试所需的故障注入方法仅限于黑盒、白盒测试。

然而，PHM本身的正确性和可信性也需要得到验

证，特别是在航空电子系统的设计阶段，为了检验PHM功能本身的正确性和有效性，需要在不破坏IMA处理机的运行条件下进行故障注入。采用软件编程控制，通过综合化网络人为地输入或触发IMA处理机的错误是一种可以满足上述要求的故障注入技术解决方案。经过分析研究，这种基于AFDX的软件故障注入可分为非法数据输入、特殊信令输入、缓冲区溢出触发、数据结构溢出触发等多种方式。

本文讨论的故障注入方式主要针对非法数据输入和特殊信令输入。前者根据一定的故障场景构造出异常且明显有悖于物理规律或性能界限的飞行数据，可以包含AFDX网络的采样端口和队列端口的传输数据；后者针对无法用软件直接模拟的故障，与驻留在IMA中的调试进程或程序段配合使用，通过发送特殊的信令，人为设置故障日志记录，直接引发分区的健康管理功能，以观测PHM进程的响应情况。

首先给出故障注入数据配置和管理方案，随后提出并论证一种在PC主机环境下使软件定时和AFDX端系统卡的硬件定时相配合，提高数据刷新率准确程

度的定时发送策略，最后汇报实际的运行结果，并通过对比展示了本发送策略对于近似逼近理想的发送时刻的作用。

# 1 故障注入系统的组成

基于AFDX综合化网络的故障注入系统主要由故障注入功能主机、AFDX交换机、嵌入式系统3部分组成，如图1所示。

![](https://cdn-mineru.openxlab.org.cn/result/2025-09-13/22609e2c-198a-4095-be48-487596ff3196/8a740603b1ddae586714b62cc768f1dce936bf73debd31afd543eaf61a245b21.jpg)  
图1故障注入系统整体框图 Fig.1 Structure diagram of fault injection system

为了降低成本并便于编程开发，故障注入功能主机使用PC机，采取Visual  $\mathrm{C} + +$  的MFC框架开发故障注入软件调用AFDX端系统卡API的实现形式。所需正常的通信数据和注入的故障数据是根据接口控制文件（ICD）和数据文件离线格式定义和设置的，主机通过定时器控制向AFDX端系统板卡写入数据的时间间隔。由于编程环境处于非实时操作系统，不能完全依赖主机的定时功能，必须即时且合理地将离线定义好的数据（包含正常数据和带有错误的数据）加载到AFDX端系统卡的采样或队列端口，使加载的数据根据AFDX端系统板卡的协处理和硬件定时保证其带宽分配间隔（BAG）等定时参数，被发送到AFDX的物理层，这些数据会根据AFDX网络的静态路由和IMA处理机上的模块分区设置被发送到嵌入式系统的特定分区的特定模块来驱动应用程序运行。

# 2 故障数据的配置和管理

在一般情况下，注入的故障数据是在一段连续的

正常数据中模拟偶发的错误，所以故障注入系统必须持续地发送驱动嵌入式系统中应用程序的正常航空电子参数，并根据仿真场景插入预设的故障，为了管理和配置具有不同数据结构的正常数据和故障设置情况，采用轻量化的数据库结合二进制数据文件的方案，其中，前者管理的是接口控制文件的定义和数据帧的结构定义，而后者存储着离线生成的被注入数据。

# 2.1 数据封装格式

故障数据的配置按照AFDX网络协议中的功能数据集合的方法把数据封装起来（见图2），作为AFDX帧的载荷。功能数据集合（FDS）是一种将消息中数据原语一起聚合成组的办法。为了让计算机更有效率地存储和检索数据，数据的配置要遵循数据对齐原则。

![](https://cdn-mineru.openxlab.org.cn/result/2025-09-13/22609e2c-198a-4095-be48-487596ff3196/e836c038e5c2f7a225f1c3f6f41fb29d9c2cab2496076b4070fe7c14ac34c867.jpg)  
图2 功能数据集合的结构 Fig.2 Structure of functional dataset

在航电系统的设计过程中，FDS字段的设置由接口控制文件（ICD）规范说明。故障注入软件需要根据ICD的记录定义数据结构，用数据库对ICD记录进行管理维护；考虑到本软件面向数据的应用，不用配备全功能的数据库服务器端，而采用轻量化的SQLite关系型表格进行管理。

# 2.2 数据接口控制与管理

故障注入的原始数据包含参数信息或文本信息，例如本机飞行参数信息、邻机飞行信息、数字化通信报文等，把这些数据拆分为一个个数据单元，在SQLite数据库存储每个数据单元的属性信息，如图3所示。

每个数据单元对应很多数据实例，例如可以通过仿真器生成一段时间内带有一定变化趋势的本机位置数据；为了满足随机存取这些数据实例的需求，将原始的数据实例（有的仿真器是以文本形式输出）统一转换为二进制文件存储。二进制数据已经根据AFDX网络规定调整成为连贯的大端（bigendian）形式，直接对应于AFDX帧载荷的数据位顺序，降低了发送时格式转换的开销。

例如，对于飞机的位置和航向信息，可以利用FDS的格式安排各数据元素。首先将本机飞行信息拆分为经度、纬度、高度、东向速度、北向速度、天向速度、俯仰角、横滚角、航向角这9个单元，并对它们进行编号（每个单元拥有唯一的ID），然后将每个原始数据包含的

数据单元ID、数据格式、单元大小存储到数据库中。为每个数据集合（DS）预留出4个数据单元（见图2），用户只需在数据单元中装填数据单元ID就能自由地搭配每个DS中的数据。发送时，通过DS中数据单元ID查询数据库，找到对应数据单元的路径来完成对FDS的装填。

![](https://cdn-mineru.openxlab.org.cn/result/2025-09-13/22609e2c-198a-4095-be48-487596ff3196/291d5a8f5fc79348681ea30b7c62fc960d1d0e3fa328c2092b403c4a800c65a3.jpg)  
图3 SQLite数据库 Fig.3 SQLite database

# 2.3 故障数据的设置

故障注入系统的软件包含数据显示界面、数据配置界面和故障注入操作界面。正常和待注入的数据格式和参数含义由SQLite数据库中的表格定义，数据内容来自二进制文件，并在数据显示界面中以列表形式显示。

在数据配置界面中，用户通过编辑数据内容、VL和分区图标之间的连线设定数据流综合和分发的层次，即：数据内容套接于VL数据载荷的各个FDS中，多条VL接入到目的节点的特定分区（见图4），通过各图标的弹出式菜单，并结合左侧的导航，可以对数据内容、VL和分区的详细参数进行显示和编辑；在配置完成后，设定每条VL发送时长与发送速率并进入数据故障注入操作界面。

![](https://cdn-mineru.openxlab.org.cn/result/2025-09-13/22609e2c-198a-4095-be48-487596ff3196/2955168b8a3ffa37ac57b0bf554fad1c349d7dc5fc5d98037b2377710bd1c773.jpg)  
图4 数据配置界面 Fig.4 Data configuration interface

故障注入操作界面采用图形化方法将不同应用数据和特殊指令的VL数据流以条带的形式显示，并在发送时用游标进行指示。数据配置已经对应于各条带加载了预先存储的正常数据，这时再双击相应的条带，可以于指定的时间点在正常数据中设置数值错误、遗漏等不同形式的故障；另外，对应于被测试的各个分区，以及整个被测试系统，分别预留了放置特殊指令的

条带，可以通过故障码的形式注入信令型故障

# 3 故障注入的软件定时

为了弥补非实时操作系统定时精度不足的缺陷，使发送时刻近似于理想的数据更新时刻，提出了一种发送策略，解决主机应用数据更新率与AFDX端系统定时器周期不匹配的问题，进行故障注入数据帧发送操作的软件定时。

# 3.1 主机端定时器的选择

数据装配完成之后，故障注入平台需要定时向AFDX端系统板卡写入数据，Visual  $\mathrm{C} + +$  开发环境下可选的定时器包含SetTimer函数和多媒体定时器。

SetTimer函数是对ROMBIOS架构下定时器的简单扩充，最高分辨率仅约为  $55~\mathrm{ms}$  ，且其对应的WM_TIMER消息传输优先级低，得不到及时处理。

多媒体定时器由TimeSetEvent函数单独创建线程，不依赖消息传输机制，中断后操作系统会调用预先设置的回调函数，可以在回调函数中发出消息触发MFC应用程序进行发送操作，其工作原理如图5所示。多媒体定时器精度的标新值可以达到  $1\mathrm{ms}$  ，但是由于非实时操作系统的不确定性，中断的时间间隔受到当时主机负载的影响，会出现毫秒级时延抖动。

![](https://cdn-mineru.openxlab.org.cn/result/2025-09-13/22609e2c-198a-4095-be48-487596ff3196/cf92abadbf27d7389df28115f6617e45469f33129ea88d82e6efa39f1f5750b8.jpg)  
图5 多媒体定时器工作原理 Fig.5 Schematic diagram of multimedia timer

如果定时周期设定偏小，线程频繁占用CPU时间片，不仅会造成工作效率低下，影响其他线程的运行，而且本身的定时精度也随时延抖动而恶化；反之，则无法与AFDX的数据更新间隔较好匹配。经过设计折衷，将多媒体定时器的中断周期设置为  $10~\mathrm{ms}$  。

为了降低主机的处理负担，各种VL共用一个多媒体定时器，这意味着需要根据多组用户定义的数据更新间隔和发送间隔，制定各次定时器中断时的写入数据的内容和数量，数据更新率与定时器周期不匹配时（即不呈整倍数关系），计时次数取整操作会造成实际发送时间与预设时间之间具有一定的偏差，需要一定的发送策略，尽可能避免或减小偏差。

# 3.2 定时发送策略

AFDX网络的VL被配置为采样或队列端口，且在

发送端口进行流量整形，即同一条VL中相邻帧的起始位之间的时间间隔不大于VL的BAG。

对于发送间隔及其BAG小于或接近  $10\mathrm{ms}$  量级（根据ARINC664P7的规定，为  $1\mathrm{ms},2\mathrm{ms},4\mathrm{ms},8\mathrm{ms}$  或  $16\mathrm{ms}$  的VL流量，单纯依靠软件定时器中断会产生很大误差。解决方法是，每次软件定时中断后，可以将一批数据装载入发送队列中，使它们受到低层AFDX端系统卡硬件的BAG约束，进而保证它们的发送重复频率。值得说明的是，这种解决方案利用了队列模式发送的多缓冲机制，即使对于传输采样数据的VL，也将其配置为队列模式发送，数据帧一旦接入到交换机，将不区分队列或采样模式，目的端仍可设定为采样端口正常接收。

定时发送操作还要处理好数据更新间隔（或所谓“数据更新率”）的问题。数据更新间隔由应用决定，一般大于发送间隔和BAG。在定时器中断的时候，通过编程实现相应的数据加载的策略，在发送端向AFDX端系统卡的队列FIFO缓存区写入一批消息。

定时发送策略的设计使定时中断的时刻先于数据刷新的时刻，这样对于原先为采样模式的数据流，这批消息的前半部分是含有当前数据的若干条重复消息，后面是数据更新之后的第一条消息。为了尽可能接近理想的数据更新和传输间隔，需进行如下模型分析。

设数据传输时的参数为起始时间  $t_0$  、预设发送间隔  $T_{u}$  、定时器定时周期  $T_{i}$  、VL的BAG为  $T_{B}$ ，以及每批发送的消息总数  $N$  。对于给定的VL，设某次数据更新后第一条消息的序号为  $k$ ，对应软件定时器中断的次数为  $x_{k}$ ；相应地设  $y_{k}$  代表该条消息之前未更新消息的条数。

消息成批加载的时机，以及缓存区前半部分消息的个数是发送策略设计的关键，则定义发送策略为  $\{x_{k}$ $y_{k}\}$ ；初始的发送策略为  $(t_0 / T_i,1)$ ，在运行过程中，  $\{x_{k}$ $y_{k}\}$  根据前面一次的发送策略  $(x_{k - 1},y_{k - 1})$  迭代计算得到；采用下列算法求得与理想发送时刻最接近的  $x_{k}$  值。

1)  $T_{i}\geq T_{B}$  的情形。

第  $k$  条消息和第  $k - 1$  条消息的发送间隔大于1个BAG，并且在VL的占用上不会产生冲突，第  $k$  条消息的实际发送时间不得超过预定发送时间。

$$
\left[\frac{t_0 + kT_u}{T_t}\right]\geqslant x_k > x_{k - 1} \tag{1}
$$

$$
x_{k}T_{t}\geqslant x_{k - 1}T_{t} + \left(y_{k - 1} + 1\right)T_{B} \tag{2}
$$

$$
y = \left[\frac{t_0 + k\bullet T_u - x\bullet T_t}{T_B}\right] \tag{3}
$$

确定了  $x$  的范围，对于有限的几个可用的取值，可根据式（3）找到与  $x$  对应的  $y$ ，遍历  $x$ ，找到时间误差绝对值

$$
\delta = \left|t_0 + kT_u - x_kT_t - y_kT_B\right| \tag{4}
$$

最小的  $x$  和  $y$  即  $\{x_{k},y_{k}\}$  。对于每条消息，采取的是迭代计算。

2)  $T_{t}< T_{B}$  的情形。

在这种情况下，无法通过AFDX网络中消息的BAG特性准确控制消息。

$$
x_{k} = \left[\frac{t_{0} + kT_{t}}{T_{u}}\right] \tag{5}
$$

$$
y_{k} = 1 \tag{6}
$$

均方误差分析

$$
\delta = \sqrt{\frac{1}{N}\sum_{k = 0}^{N - 1}\left(t_k - T_k\right)^2} \tag{7}
$$

式中：  $t_k$  为第  $k$  条消息的实际发送时间；  $T_{k}$  为第  $k$  条消息的预设发送时间；  $t$  为实际发送速率的平方误差，这个参数越小说明误差越小，即实际发送速率更加接近预设速率。

$$
d = \max \{y_{1},y_{2},y_{3},\dots ,y_{N}\} \tag{8}
$$

式中，  $d$  为VL队列端口的深度，在对AFDX端系统板卡发送端口进行配置时，VL队列端口的深度必须大于或者等于  $d$

采用这种定时发送策略，可以在最接近用户定义的数据发送时间间隔的情况下向目的端发送数据，即在理论上达到更加准确的数据发送速率。

# 4 单元测试实验及结果分析

实验系统是由计算机、AFDX端系统板卡和AFDX交换机组建而成，如图6所示。AFDX端系统板卡包含两个通道。在发送端，采用在MFC下编写的故障注入平台对消息进行配置（网络配置、VL配置和端口配置等），在目的端，采用加拿大Ballard公司的Copilot软件对消息帧进行监控。

![](https://cdn-mineru.openxlab.org.cn/result/2025-09-13/22609e2c-198a-4095-be48-487596ff3196/311e43e671cdfa516843a25c66ab8b1d69b3ad6d63434cf0515f5465b63ed742.jpg)  
图6 实验系统 Fig.6 Experiment system

在上述实验系统下，通过故障注入软件向目的端系统进行故障注入，并在目的端通过Copilot软件监控错误帧信息。

# 4.1 数据帧定时发送

准备发送的数据包的参数配置为：  $t_0 = 0 \mathrm{ms},T_u =$ $45\mathrm{ms},T_t = 10\mathrm{ms},T_B = 8\mathrm{ms},N = 3($  在  $N > 3$  的情形下，消息传输间隔的模式是前3条消息的重复）。分别在对发送策略进行优化和未进行优化的情况下发送消息，获取消息的接收情况并进行分析，如图7所示。

![](https://cdn-mineru.openxlab.org.cn/result/2025-09-13/22609e2c-198a-4095-be48-487596ff3196/7e6c0032ec69f2301e04ccea387bdb84565ef93488a4610588e30d3a39ba8628.jpg)  
图7 消息接收情况分析 Fig.7 Message reception analysis

从图7可以看出，在发送第2条消息时，优化之后的实际发送时间更加接近预设发送时间，一定程度上减小了时间误差。

# 4.2 实验结果和对比分析

目的端系统采用Copilot软件，采集并记录接收到的消息。对于给定的VLID，监视其中各条消息的循环SN标识、绝对发送时间和相邻消息发送时间差。

实际发送过程中，即使是多媒体定时器也会产生误差。其中，表1为优化前所接收到的前3条消息的信息，有效消息序列号分别为0，1，2。表2为优化后相对应的信息。由于优化时，故障注入软件在发送第2条消息时会发送两条重复消息，故有效消息序列号分别为0，3，4。分别计算出优化之前3条消息的发送时间为  $0.000\mathrm{ms},34.015\mathrm{ms}$  和  $85.204\mathrm{ms}$  ，而优化之后3条消息的发送时间分别为  $0.000\mathrm{ms},42.097\mathrm{ms}$  和91.980ms，预设发送时间分别为  $0.000\mathrm{ms},45.000\mathrm{ms}$  和90.000ms。  $\delta_{1} = 6.920\mathrm{ms},\delta_{2} = 2.029\mathrm{ms}$  ，数据对比表明，本发送策略使数据发送间隔的定时精度成倍提高。

表2Copilot软件接收消息内容（优化后）

Table 2 Data received by Copilot (after optimization)  
表1Copilot软件接收消息内容（优化前）

Table 1 Data received by Copilot (before optimization)  

<table><tr><td>RSN</td><td>时间 /s</td><td>时间差 /s</td><td>VLID</td></tr><tr><td>0</td><td>30.787 556</td><td>0.000 000</td><td>6</td></tr><tr><td>1</td><td>30.821 571</td><td>0.034 015</td><td>6</td></tr><tr><td>2</td><td>30.872 760</td><td>0.051 189</td><td>6</td></tr></table>

<table><tr><td>RSN</td><td>时间 /s</td><td>时间差 /s</td><td>VLID</td></tr><tr><td>0</td><td>150.668 10</td><td>0.016 690</td><td>6</td></tr><tr><td>1</td><td>150.676 77</td><td>0.008 676</td><td>6</td></tr><tr><td>2</td><td>150.684 85</td><td>0.008 081</td><td>6</td></tr><tr><td>3</td><td>150.692 51</td><td>0.008 655</td><td>6</td></tr><tr><td>4</td><td>150.742 39</td><td>0.049 881</td><td>6</td></tr></table>

可见，出于控制成本的考虑，不得不采用非实时操作系统和PC主机的情况下，本发送策略充分利用了多媒体定时器的时间确定性不稳定，而AFDX端系统板卡协处理器的定时器高精度硬件定时，优化应用层数据写入的时机，减少了消息的发送间隔对PC主机定时器的依赖。在民机航电系统中，如果数据流量的帧间隔不小于  $10\mathrm{ms}$  ，且能与相应PHM分区调用响应时间的量级相匹配，本文所述的故障注入系统的定时精度具有可用性。

# 5 总结

本文的故障注入方案包含故障数据配置和故障数据发送功能，使用PC主机端和API编程对嵌入式平台进行故障注入，能够在一定程度上解决主机应用数据更新率与AFDX端系统定时器周期不匹配的问题，适用于对嵌入式平台的IMA系统健康管理功能进行实验验证。相应的软件界面和数据管理方式，可以使用户根据IMA系统的故障模式设计不同的故障场景，进行故障注入半物理仿真。
